package galaxy.ins;

option cc_generic_services = true;

enum NodeStatus {
    kLeader = 0;
    kCandidate = 1; 
    kFollower = 2;
    kOffline = 3;  
}

enum LogOperation {
    kPut = 1;
    kDel = 2;
    kLock = 3;
    kUnLock = 4;
    kNop = 10;
};

message Entry {
    required string key = 1;
    required bytes value = 2;
    required int64 term = 3;
    optional LogOperation op = 4;
}

message AppendEntriesRequest {
    required int64 term = 1;
    required string leader_id = 2;
    optional int64 prev_log_index = 3;
    optional int64 prev_log_term = 4;
    optional int64 leader_commit_index = 5;
    repeated Entry entries = 6;
}

message AppendEntriesResponse {
    required int64 current_term = 1;
    required bool success = 2;
    optional int64 log_length = 3;
}

message VoteRequest {
    required int64 term = 1;
    required string candidate_id = 2;
    optional int64 last_log_index = 3;
    optional int64 last_log_term = 4;
}

message VoteResponse {
    required int64 term = 1;
    required bool vote_granted = 2;
}

message PutRequest {
    required string key = 1;
    required bytes value = 2;
}

message PutResponse {
    required bool success = 1;
    optional string leader_id = 2;
}

message GetRequest {
    required string key = 1; 
}

message GetResponse {
    required bool hit = 1;
    optional bytes value = 2;
    optional string leader_id = 3;
    required bool success = 4;
}

message DelRequest {
    required string key = 1;    
}

message DelResponse {
    required bool success = 1;
    optional string leader_id = 2;
}


message UnLockRequest {
    required string key = 1;
    required string session_id = 2;  
}

message UnLockResponse {
    required bool success = 1;
    optional string leader_id = 2;
}

message ShowStatusRequest {
    
}

message ShowStatusResponse {
    required NodeStatus status = 1;    
    required int64 term = 2;
    required int64 last_log_index = 3;
    required int64 last_log_term = 4;
    optional int64 commit_index = 5; 
    optional int64 last_applied = 6;
}

message ScanRequest {
    required string start_key = 1;
    required string end_key = 2;
    required int32 size_limit = 3;    
}

message ScanItem {
    required string key = 1;
    required bytes value = 2;
}

message ScanResponse {
    optional bool has_more = 1;
    repeated ScanItem items = 2;
    optional string leader_id = 3;
    required bool success = 4;
}

message LockRequest {
    required string key = 1;
    required string session_id = 2;
    optional string hostname = 3;
}

message LockResponse {
    required bool success = 1;
    optional string leader_id = 2;
}

message KeepAliveRequest {
    required string session_id = 1;
    optional string host_name = 2;
    repeated string locks = 3;
}

message KeepAliveResponse {
    required bool success = 1;
    optional string leader_id = 2;    
}

message WatchRequest {
    required string key = 1;
    required string session_id = 2;
    optional string old_value = 3;
    optional bool key_exist = 4;
}

message WatchResponse {
    optional bool success = 1 [default = false];
    optional string leader_id = 2 [default = ""];
    optional string key = 3;
    optional string value = 4;
    optional bool deleted = 5;
    optional bool canceled = 6 [default = false];
    optional string watch_key = 7;
}

message CleanBinlogRequest {
    required int64 end_index = 1;
}

message CleanBinlogResponse {
    required bool success = 1;
}

service InsNode {
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc Vote(VoteRequest) returns (VoteResponse);
    rpc Put(PutRequest) returns (PutResponse);
    rpc Get(GetRequest) returns (GetResponse);
    rpc Delete(DelRequest) returns (DelResponse);
    rpc Scan(ScanRequest) returns (ScanResponse);
    rpc Lock(LockRequest) returns (LockResponse);
    rpc UnLock(UnLockRequest) returns (UnLockResponse);
    rpc Watch(WatchRequest) returns (WatchResponse);
    rpc KeepAlive(KeepAliveRequest) returns (KeepAliveResponse);
    rpc ShowStatus(ShowStatusRequest) returns (ShowStatusResponse);
    rpc CleanBinlog(CleanBinlogRequest) returns (CleanBinlogResponse);
}

